(defun proveriSendvicX (sendvic red position brojac index poslednja_pozicija flag)
  (cond ((null red) -1)
        ((= sendvic 0) (if (= index poslednja_pozicija)
                           (if (equal (car red) 'X)
                             (proveriSendvicX '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija 1)
                             (proveriSendvicX '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija 1))
                         
         
                           (if (equal (car red) 'X)
                             (proveriSendvicX '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija 0)
                             (proveriSendvicX '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija 0))
                         ))
        (t                                           ;(= sendvic 1) 
         (cond ((equal (car red) 'O) (proveriSendvicX '1 (cdr red) position (+ 1 brojac) (+ 1 index) poslednja_pozicija flag))
               ((equal (car red) 'X) (if (= flag 1) 
                                         (if (> brojac 0) position (proveriSendvicX '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '0))
                                         (if (= index poslednja_pozicija)
                                             (if (> brojac 0) position (proveriSendvicX '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '1))
                                             (proveriSendvicX '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '0))))
               (t (proveriSendvicX '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija flag))
               )
         )
        )
  )                       

(defun izbaciSendvicX (pos tren red)
  (cond ((null red) '())
        ((<= tren pos) (cons (car red) (izbaciSendvicX pos (1+ tren) (cdr red))))
        ((equal (car red) 'X) red)
        (t (cons '- (izbaciSendvicX pos (1+ tren) (cdr red))))
        )
  )

(defun eliminisiSendviceIzRedaX (pos red)
  (let ((pozicija (proveriSendvicX '0 red '0 '0 '0 pos '0)))
    (if (> pozicija '-1) (eliminisiSendviceIzRedaX pos (izbaciSendvicX pozicija '0 red)) red)))

(defun eliminisiSendviceIzMatriceXorig (i j matrica)
  (cond ((null (car matrica)) '())
        ((not (= i 0)) (cons (car matrica) (eliminisiSendviceIzMatriceXorig (1- i) j (cdr matrica))))
        (t (cons (eliminisiSendviceIzRedaX j (car matrica)) (eliminisiSendviceIzMatriceXorig (1- i) j (cdr matrica))))))

(defun eliminisiSendviceIzMatriceX (i j matrica)
  (eliminisiSendviceIzMatriceXorig i j (transpon (eliminisiSendviceIzMatriceXorig j i (transpon matrica)))))

(defun proveriSendvicO (sendvic red position brojac index poslednja_pozicija flag)
  (cond ((null red) -1)
        ((= sendvic 0) (if (= index poslednja_pozicija)
                           (if (equal (car red) 'O)
                             (proveriSendvicO '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija 1)
                             (proveriSendvicO '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija 1))
                         
         
                           (if (equal (car red) 'O)
                             (proveriSendvicO '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija 0)
                             (proveriSendvicO '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija 0))
                         ))
        (t                                           ;(= sendvic 1) 
         (cond ((equal (car red) 'X) (proveriSendvicO '1 (cdr red) position (+ 1 brojac) (+ 1 index) poslednja_pozicija flag))
               ((equal (car red) 'O) (if (= flag 1) 
                                         (if (> brojac 0) position (proveriSendvicO '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '0))
                                         (if (= index poslednja_pozicija)
                                             (if (> brojac 0) position (proveriSendvicO '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '1))
                                             (proveriSendvicO '1 (cdr red) index '0 (+ 1 index) poslednja_pozicija '0))))
               (t (proveriSendvicO '0 (cdr red) position '0 (+ 1 index) poslednja_pozicija flag))
               )
         )
        )
  )

(defun izbaciSendvicO (pos tren red)
  (cond ((null red) '())
        ((<= tren pos) (cons (car red) (izbaciSendvicO pos (1+ tren) (cdr red))))
        ((equal (car red) 'O) red)
        (t (cons '- (izbaciSendvicO pos (1+ tren) (cdr red))))
        )
  )

(defun eliminisiSendviceIzRedaO (pos red)
  (let ((pozicija (proveriSendvicO '0 red '0 '0 '0 pos '0)))
    (if (> pozicija '-1) (eliminisiSendviceIzRedaO pos (izbaciSendvicO pozicija '0 red)) red)))

(defun eliminisiSendviceIzMatriceOorig (i j matrica)
  (cond ((null (car matrica)) '())
        ((not (= i 0)) (cons (car matrica) (eliminisiSendviceIzMatriceOorig (1- i) j (cdr matrica))))
        (t (cons (eliminisiSendviceIzRedaO j (car matrica)) (eliminisiSendviceIzMatriceOorig (1- i) j (cdr matrica))))))

(defun eliminisiSendviceIzMatriceO (i j matrica)
  (eliminisiSendviceIzMatriceOorig i j (transpon (eliminisiSendviceIzMatriceOorig j i (transpon matrica)))))