(defun transpon (matrix)
  (cond ((null (car matrix)) '())
        (t (append (list (mapcar 'car matrix)) (transpon (mapcar 'cdr matrix))))
        )
  )

(defun shiftLeft (lista num)
  (cond ((= num 1) lista)
        ((< num 1) (shiftLeft (append lista '(-)) (+ num 1)))
        (t (shiftLeft (append lista '(-)) (- num 1)))
        )
  )

(defun shiftRight (lista num)
  (cond ((= num 1) lista)
        ((< num 1) (shiftRight (cons '- lista) (+ num 1)))
        (t (shiftRight (cons '- lista) (- num 1)))
        )
  )

(defun dopuniSLevaZa (lista num)
  (append (generisiListu '- (- num (length lista))) lista)
  )

(defun dopuniSDesnaDo (lista num)
  (append lista (generisiListu '- (- num (length lista))))
  )

(defun getMainDiags (matrix n)
  (cond ((null (car matrix)) '())
        (t (cons (dopuniSDesnaDo (shiftRight (car matrix) n) (- (* 2 _n) 1)) (getMainDiags (cdr matrix) (1- n))))
        )
  )

(defun getSideDiags (matrix n)
  (cond ((null (car matrix)) '())
        (t (cons (dopuniSLevaZa (shiftLeft (car matrix) n) (- (* 2 _n) 1)) (getSideDiags (cdr matrix) (1- n))))
        )
  )
